generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model paciente {
  id                Int        @id @default(autoincrement())
  nombrePaciente    String
  sexo              String
  edadGestional     String[] // ya no int , ya menajariamos los datos en un array donde el primer elemento seria el semana y el segundo dias  --- es de paciente y no de cartilla
  fechaNacimiento   DateTime // la hora se saca solo de aca 
  pesoNacimiento    Decimal
  nacimientoTermino Boolean
  madreRelacion     madre?     @relation(fields: [madreRelacionId], references: [idMadre])
  madreRelacionId   Int?
  idUsuarioCreacion Int
  estadoRegistro    Boolean    @default(true)
  cartilla          cartilla[]
}

model madre {
  idMadre                    Int          @id @default(autoincrement())
  nombreMadre                String
  ci                         String       @db.VarChar(11)
  direccion                  String
  detalleDireccion           String?
  telefono                   String[]
  tratamientoHipertiroidismo Boolean      @default(false)
  tratamientoHiportiroidismo Boolean      @default(false)
  tratamiento                String?
  enfermedad                 String?
  departamentoRelacion       departamento @relation(fields: [departamentoRelacionId], references: [idDepartamento]) //viene en el campo de la cartilla
  departamentoRelacionId     Int
  estadoRegistro             Boolean      @default(true)
  paciente                   paciente[]
  idUsuarioCreacion          Int
}

model cartilla {
  idCartilla            Int                     @id @default(autoincrement())
  codigoBarras          String
  fechaTomaMuestras     String
  NumeroMuestra         Int
  transfucion           Boolean?
  fecha                 DateTime                @default(now())
  antibioticos          String?
  notas                 String? // por si hay notas relevantes
  pacienteRelacionId    Int
  pacienteRelacion      paciente                @relation(fields: [pacienteRelacionId], references: [id])
  centroRelacionId      Int?
  hospitalRelacionId    Int?
  redesRelacionId       Int?
  estadoRegistro        Boolean                 @default(true)
  resultadosLaboratorio resultadosLaboratorio[]
  idUsuarioCreacion     Int
}

model resultadosLaboratorio {
  idResultadosLaboratorio   Int         @id @default(autoincrement())
  laboratorioRelacionId     Int
  laboratorioRelacion       laboratorio @relation(fields: [laboratorioRelacionId], references: [idLaboratorio])
  cartillaRelacionId        Int
  cartillaRelacion          cartilla    @relation(fields: [cartillaRelacionId], references: [idCartilla])
  userSolicitanteRelacionId Int // para el campo solicitante
  userSolicitanteRelacion   user        @relation(fields: [userSolicitanteRelacionId], references: [idUser])
  fechaResultado            DateTime    @default(now())
  resultado                 String
  observaciones             String
  idUsuarioCreacion         Int
  estadoRegistro            Boolean     @default(true)
}

//  modelos relacionales logicos Entidades
model departamento {
  idDepartamento    Int         @id @default(autoincrement())
  nombreCiudad      String
  estadoRegistro    Boolean     @default(true)
  idUsuarioCreacion Int
  Madre             madre[]
  provincia         provincia[]
}

model provincia {
  idProvincia            Int          @id @default(autoincrement())
  nombreProvincia        String
  departamentoRelacionId Int
  idUsuarioCreacion      Int
  estadoRegistro         Boolean      @default(true)
  departamentoRelacion   departamento @relation(fields: [departamentoRelacionId], references: [idDepartamento])
  municipio              municipio[]
}

model municipio {
  idMunicipios        Int           @id @default(autoincrement())
  nombreMunicipio     String
  provinciaRelacionId Int
  idUsuarioCreacion   Int
  estadoRegistro      Boolean       @default(true)
  provinciaRelacion   provincia     @relation(fields: [provinciaRelacionId], references: [idProvincia])
  centro              centro[]
  laboratorio         laboratorio[]
  hospital            hospital[]
}

//  entidades de manejo de informacion
model laboratorio {
  idLaboratorio         Int                     @id @default(autoincrement())
  nombreLaboratorio     String
  registroLaboratorio   Int
  direccion             String?
  telefono              String[]
  municipioRelacionId   Int
  estadoRegistro        Boolean                 @default(true)
  municipioRelacion     municipio               @relation(fields: [municipioRelacionId], references: [idMunicipios])
  resultadosLaboratorio resultadosLaboratorio[]
  idUsuarioCreacion     Int
  user                  user[]
}

model centro {
  idCentro               Int               @id @default(autoincrement())
  nombreCentro           String
  direccion              String?
  telefono               String[]
  municipioRelacionId    Int
  municipioRelacion      municipio         @relation(fields: [municipioRelacionId], references: [idMunicipios])
  // area                   String
  estadoRegistro         Boolean           @default(true)
  // contacto               String   ////quisas no es necesario por que ya tenemos los telefonos
  idUsuarioCreacion      Int
  redPertenenciaId       Int?
  redPertenenciaRelacion redes?            @relation(fields: [redPertenenciaId], references: [idRedes])
  manejoCartillas        manejoCartillas[]
  user                   user[]
}

model redes {
  idRedes           Int               @id @default(autoincrement())
  nombreRedes       String
  estadoRegistro    Boolean           @default(true)
  idUsuarioCreacion Int
  manejoCartillas   manejoCartillas[]
  centro            centro[]
  hospital          hospital[]
}

model hospital {
  idHospital             Int       @id @default(autoincrement())
  nombre                 String
  direccion              String?
  telefono               String[]
  // area                   String // dudable
  contacto               String
  user                   user[]
  municipioRelacionId    Int
  municipioRelacion      municipio @relation(fields: [municipioRelacionId], references: [idMunicipios])
  redPertenenciaId       Int?
  redPertenenciaRelacion redes?    @relation(fields: [redPertenenciaId], references: [idRedes])
  idUsuarioCreacion      Int
  estadoRegistro         Boolean   @default(true)
}

model manejoCartillas {
  idManejoCartilla     Int        @id @default(autoincrement())
  tipoManejo           TipoManejo
  hora                 DateTime
  fecha                DateTime
  centroRelacionId     Int?
  redesIdRedes         Int?
  centroRelacion       centro?    @relation(fields: [centroRelacionId], references: [idCentro])
  redes                redes?     @relation(fields: [redesIdRedes], references: [idRedes])
  cantidadEntregado    Int?
  cantidadResivido     Int
  condigoTarjeta       String[] // aca va un rango de tarjetas 
  entregadoPor         String? // aca no seria una relacion de usuarios donde filtremos a los que son encargados o un rol que relice estas acciones ?
  estregoResultadospor String? // aca va nombres y fechas de de esta entrega esto ----- esto cuando se llena ? es en ese momento por que las fechas no coninciden 
  telefono             String?
  resividoPor          String? // aca no seria una relacion de usuarios donde filtremos a los que son encargados o un rol que relice estas acciones ?
  estadoRegistro       Boolean    @default(true)
  idUsuarioCreacion    Int
}

enum TipoManejo {
  provincia
  hospitales
  filtros
}

model user {
  idUser                Int                     @id @default(autoincrement())
  email                 String                  @unique()
  password              String
  estadoRegistro        Boolean                 @default(true)
  hospitalRelacionId    Int?
  centroRelacionId      Int?
  laboratorioRelacionId Int?
  hospitalRelacion      hospital?               @relation(fields: [hospitalRelacionId], references: [idHospital])
  centroRelacion        centro?                 @relation(fields: [centroRelacionId], references: [idCentro])
  laboratorioRelacion   laboratorio?            @relation(fields: [laboratorioRelacionId], references: [idLaboratorio])
  resultadosLaboratorio resultadosLaboratorio[]
  idUsuarioCreacion     Int
}
