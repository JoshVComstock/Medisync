generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model paciente {
  id                Int        @id @default(autoincrement())
  nombrePaciente    String
  sexo              String
  edadGestional     String[] // ya no int , ya menajariamos los datos en un array donde el primer elemento seria el semana y el segundo dias  --- es de paciente y no de cartilla
  fechaNacimiento   DateTime // la hora se saca solo de aca 
  pesoNacimiento    Decimal // lo pasamos aca ya no encartilla por ser dato del paciente como tal 
  nacimientoTermino Boolean // es de paciente y no de cartilla 
  madreRelacion     madre?     @relation(fields: [madreRelacionId], references: [idMadre])
  madreRelacionId   Int?
  estadoRegistro    Boolean    @default(true)
  cartilla          cartilla[]
}

model madre {
  idMadre                    Int          @id @default(autoincrement())
  nombreMadre                String //manejamos el campo del apellido en este mismo campo 
  ci                         String       @db.VarChar(11)
  direccion                  String
  detalleDireccion           String?
  telefono                   String[] // manejamos en este array la cantidad de telefonos que ellos quieran 
  tratamientoHipertiroidismo Boolean      @default(false)
  tratamientoHiportiroidismo Boolean      @default(false)
  tratamiento                String?
  enfermedad                 String?
  departamentoRelacion       departamento @relation(fields: [departamentoRelacionId], references: [idDepartamento]) //viene en el campo de la cartilla
  departamentoRelacionId     Int
  estadoRegistro             Boolean      @default(true)
  idUsuarioCreacion          Int
  paciente                   paciente[]
}

model cartilla {
  idCartilla            Int                     @id @default(autoincrement())
  codigoBarras          String
  fechaTomaMuestras     String
  NumeroMuestra         Int
  transfucion           Boolean?
  fecha                 DateTime                @default(now())
  antibioticos          String?
  notas                 String? // por si hay notas relevantes
  pacienteRelacionId    Int
  pacienteRelacion      paciente                @relation(fields: [pacienteRelacionId], references: [id])
  // aca podriamos referenciarlo con hospitales o centros , para saber donde se lleno la cartilla 
  centroRelacionId      Int?
  hospitalRelacionId    Int?
  redesRelacionId       Int?
  estadoRegistro        Boolean                 @default(true)
  resultadosLaboratorio resultadosLaboratorio[]
}

model laboratorio {
  idLaboratorio         Int                     @id @default(autoincrement())
  nombreLaboratorio     String
  registroLaboratorio   Int
  direccion             String?
  telefono              String[]
  municipioRelacionId   Int
  estadoRegistro        Boolean                 @default(true)
  municipioRelacion     municipio               @relation(fields: [municipioRelacionId], references: [idMunicipios])
  resultadosLaboratorio resultadosLaboratorio[]
}

//   en este pasariamos la cartilla o se aria automaticamente?
//es decir que cuando llenemos los datos de la cartilla seria la solicitud de analizis ? 

model resultadosLaboratorio {
  idResultadosLaboratorio Int         @id @default(autoincrement())
  laboratorioRelacionId   Int
  laboratorioRelacion     laboratorio @relation(fields: [laboratorioRelacionId], references: [idLaboratorio])
  cartillaRelacionId      Int
  cartillaRelacion        cartilla    @relation(fields: [cartillaRelacionId], references: [idCartilla])
  userRelacionId          Int // para el campo solicitante
  userRelacion            user        @relation(fields: [userRelacionId], references: [idUser])
  fechaResultado          DateTime    @default(now())
  resultado               String
  notas                   String
  estadoRegistro          Boolean     @default(true)
}

//  modelos relacionales logicos 
model departamento {
  idDepartamento Int         @id @default(autoincrement())
  nombreCiudad   String
  estadoRegistro Boolean     @default(true)
  Madre          madre[]
  provincia      provincia[]
}

model provincia {
  idProvincia            Int          @id @default(autoincrement())
  nombreProvincia        String
  departamentoRelacionId Int
  estadoRegistro         Boolean      @default(true)
  departamentoRelacion   departamento @relation(fields: [departamentoRelacionId], references: [idDepartamento])
  municipio              municipio[]
}

model municipio {
  idMunicipios        Int           @id @default(autoincrement())
  nombreMunicipio     String
  provinciaRelacionId Int
  estadoRegistro      Boolean       @default(true)
  provinciaRelacion   provincia     @relation(fields: [provinciaRelacionId], references: [idProvincia])
  centro              centro[]
  laboratorio         laboratorio[]
}

//  entidades de manejo de informacion

model centro {
  idCentro            Int               @id @default(autoincrement())
  nombreCentro        String
  direccion           String?
  telefono            String[]
  municipioRelacionId Int
  municipioRelacion   municipio         @relation(fields: [municipioRelacionId], references: [idMunicipios])
  area                String
  estadoRegistro      Boolean           @default(true)
  contacto            String
  manejoCartillas     manejoCartillas[]
}

//  aca en redes es una agrupacion de centros que pertenecen a una red? o solo es un nombre ?
model redes {
  idRedes         Int               @id @default(autoincrement())
  nombreRedes     String
  estadoRegistro  Boolean           @default(true)
  manejoCartillas manejoCartillas[]
}

model hospital {
  idHospital     Int     @id @default(autoincrement())
  nombre         String
  telefono       String
  estadoRegistro Boolean @default(true)
  // completar informacion
}

// manejo de cartilla 
// model registroProbincias {
//   idRegistroProvincias     Int             @id @default(autoincrement())
//   manejoCartillaRelacionId Int
//   manejoRelacion           manejoCartillas @relation(fields: [manejoCartillaRelacionId], references: [idManejoCartilla])
// }

// model registroHospitales {
//   idRegistroHospitales     Int             @id @default(autoincrement())
//   manejoCartillaRelacionId Int
//   manejoRelacion           manejoCartillas @relation(fields: [manejoCartillaRelacionId], references: [idManejoCartilla])
// }

// model registroFiltros {
//   idRegistroFiltros        Int             @id @default(autoincrement())
//   manejoCartillaRelacionId Int
//   manejoRelacion           manejoCartillas @relation(fields: [manejoCartillaRelacionId], references: [idManejoCartilla])
// }

model manejoCartillas {
  idManejoCartilla     Int      @id @default(autoincrement())
  tipoManejo           String // aca pueden vendra si es de hospitales , provincias , filtros , ya despues es filtrar la informacion por este campo 
  hora                 DateTime
  fecha                DateTime
  // creo los hospitales lo conocen como redes en los campos lo tienen como redes / hospitales 
  centroRelacionId     Int?
  redesIdRedes         Int?
  centroRelacion       centro?  @relation(fields: [centroRelacionId], references: [idCentro])
  redes                redes?   @relation(fields: [redesIdRedes], references: [idRedes])
  cantidadEntregado    Int?
  cantidadResivido     Int
  condigoTarjeta       String[] // aca va un rango de tarjetas 
  entregadoPor         String? // aca no seria una relacion de usuarios donde filtremos a los que son encargados o un rol que relice estas acciones ?
  estregoResultadospor String? // aca va nombres y fechas de de esta entrega esto ----- esto cuando se llena ? es en ese momento por que las fechas no coninciden 
  telefono             String?
  resividoPor          String? // aca no seria una relacion de usuarios donde filtremos a los que son encargados o un rol que relice estas acciones ?
  estadoRegistro       Boolean  @default(true)
}

model user {
  idUser                Int                     @id @default(autoincrement())
  email                 String
  password              String
  estadoRegistro        Boolean                 @default(true)
  hospitalRelacionId    Int
  centroRelacionId      Int
  laboratorioRelacionId Int
  resultadosLaboratorio resultadosLaboratorio[]
}
